#coding: utf-8

from smbus2 import SMBus
import time # timeモジュールをインポート

bus_number  = 1
i2c_address = 0x76

bus = SMBus(bus_number)

digT = []
digP = []
digH = []

t_fine = 0.0


def writeReg(reg_address, data):
    bus.write_byte_data(i2c_address,reg_address,data)

def get_calib_param():
    calib = []
    
    for i in range (0x88,0x88+24):
        calib.append(bus.read_byte_data(i2c_address,i))
    calib.append(bus.read_byte_data(i2c_address,0xA1))
    for i in range (0xE1,0xE1+7):
        calib.append(bus.read_byte_data(i2c_address,i))

    digT.append((calib[1] << 8) | calib[0])
    digT.append((calib[3] << 8) | calib[2])
    digT.append((calib[5] << 8) | calib[4])
    digP.append((calib[7] << 8) | calib[6])
    digP.append((calib[9] << 8) | calib[8])
    digP.append((calib[11]<< 8) | calib[10])
    digP.append((calib[13]<< 8) | calib[12])
    digP.append((calib[15]<< 8) | calib[14])
    digP.append((calib[17]<< 8) | calib[16])
    digP.append((calib[19]<< 8) | calib[18])
    digP.append((calib[21]<< 8) | calib[20])
    digP.append((calib[23]<< 8) | calib[22])
    digH.append( calib[24] )
    digH.append((calib[26]<< 8) | calib[25])
    digH.append( calib[27] )
    digH.append((calib[28]<< 4) | (0x0F & calib[29]))
    digH.append((calib[30]<< 4) | ((calib[29] >> 4) & 0x0F))
    digH.append( calib[31] )
    
    for i in range(1,2):
        if digT[i] & 0x8000:
            digT[i] = (-digT[i] ^ 0xFFFF) + 1

    for i in range(1,8):
        if digP[i] & 0x8000:
            digP[i] = (-digP[i] ^ 0xFFFF) + 1

    for i in range(0,6):
        if digH[i] & 0x8000:
            digH[i] = (-digH[i] ^ 0xFFFF) + 1  

def compensate_T(adc_T):
    global t_fine
    v1 = (adc_T / 16384.0 - digT[0] / 1024.0) * digT[1]
    v2 = (adc_T / 131072.0 - digT[0] / 8192.0) * (adc_T / 131072.0 - digT[0] / 8192.0) * digT[2]
    t_fine = v1 + v2
    temperature = t_fine / 5120.0
    return temperature # 値を返すように変更

def compensate_P(adc_P):
    global  t_fine
    pressure = 0.0
    
    v1 = (t_fine / 2.0) - 64000.0
    v2 = (((v1 / 4.0) * (v1 / 4.0)) / 2048) * digP[5]
    v2 = v2 + ((v1 * digP[4]) * 2.0)
    v2 = (v2 / 4.0) + (digP[3] * 65536.0)
    v1 = (((digP[2] * (((v1 / 4.0) * (v1 / 4.0)) / 8192)) / 8)  + ((digP[1] * v1) / 2.0)) / 262144
    v1 = ((32768 + v1) * digP[0]) / 32768
    
    if v1 == 0:
        return 0.0 # 0除算を避ける (エラー処理として None を返すなども検討可)
    pressure = ((1048576 - adc_P) - (v2 / 4096)) * 3125
    if pressure < 0x80000000: # Python 3 では大きな整数も扱えるのでこのチェックは実質的に符号判定に近い
        pressure = (pressure * 2.0) / v1
    else:
        pressure = (pressure / v1) * 2
    v1 = (digP[8] * (((pressure / 8.0) * (pressure / 8.0)) / 8192.0)) / 4096
    v2 = ((pressure / 4.0) * digP[7]) / 8192.0
    pressure = pressure + ((v1 + v2 + digP[6]) / 16.0)  
    return pressure / 100.0 # hPa単位で値を返すように変更

def compensate_H(adc_H):
    global t_fine
    var_h = t_fine - 76800.0
    if var_h == 0: # 厳密な浮動小数点数の比較は注意が必要だが、ここでは元のロジックを維持
         # 0除算を避ける (エラー処理として None を返すなども検討可)
        humidity = 0.0 # または適切なエラー値
    else:
        humidity = (adc_H - (digH[3] * 64.0 + digH[4]/16384.0 * var_h)) * \
                 (digH[1] / 65536.0 * (1.0 + digH[5] / 67108864.0 * var_h * \
                 (1.0 + digH[2] / 67108864.0 * var_h)))
        humidity = humidity * (1.0 - digH[0] * humidity / 524288.0)

    if humidity > 100.0:
        humidity = 100.0
    elif humidity < 0.0:
        humidity = 0.0
    return humidity # 値を返すように変更

def readData():
    data = []
    for i in range (0xF7, 0xF7+8): # センサーから温湿度・気圧の生データを読み出す
        data.append(bus.read_byte_data(i2c_address,i))
    pres_raw = (data[0] << 12) | (data[1] << 4) | (data[2] >> 4)
    temp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4)
    hum_raw  = (data[6] << 8)  |  data[7]
    
    # 各測定値の生データを補正関数に渡して、実際の値に変換
    temperature = compensate_T(temp_raw)
    pressure_hPa = compensate_P(pres_raw)
    humidity_percent = compensate_H(hum_raw)
    
    return temperature, pressure_hPa, humidity_percent # 3つの値をタプルで返す

def setup():
    osrs_t = 1          #Temperature oversampling x 1
    osrs_p = 1          #Pressure oversampling x 1
    osrs_h = 1          #Humidity oversampling x 1
    mode   = 3          #Normal mode
    t_sb   = 5          #Tstandby 1000ms
    filter = 0          #Filter off
    spi3w_en = 0        #3-wire SPI Disable

    ctrl_meas_reg = (osrs_t << 5) | (osrs_p << 2) | mode
    config_reg    = (t_sb << 5) | (filter << 2) | spi3w_en
    ctrl_hum_reg  = osrs_h

    writeReg(0xF2,ctrl_hum_reg)
    writeReg(0xF4,ctrl_meas_reg)
    writeReg(0xF5,config_reg)

# --- メイン処理 ---
if __name__ == '__main__':
    setup()             # センサーの初期設定
    get_calib_param()   # 補正パラメータの読み出し

    all_readings = []   # 全ての測定結果を格納するリスト
    measurement_duration = 60  # 測定時間（秒）
    interval = 5               # 測定間隔（秒）
    
    start_time = time.time()   # 測定開始時刻
    
    print(f"センサーデータの測定を開始します。測定時間: {measurement_duration}秒, 測定間隔: {interval}秒")

    try:
        while (time.time() - start_time) < measurement_duration:
            loop_iter_start_time = time.time() # このイテレーションの開始時刻

            # データを読み取る
            temp, pres, hum = readData()
            current_timestamp = time.time() # データ取得時刻のタイムスタンプ

            # 取得したデータをリストに追加
            all_readings.append({
                "timestamp": current_timestamp,
                "temperature_celsius": temp,
                "pressure_hpa": pres,
                "humidity_percent": hum
            })
            
            # 5秒ごとにデータを取得していることを分かりやすく表示（任意）
            print(f"[{time.strftime('%H:%M:%S', time.localtime(current_timestamp))}] "
                  f"T:{temp:.2f}℃, P:{pres:.2f}hPa, H:{hum:.2f}%")

            # 次の測定までの待機時間を計算
            # readData()の処理時間も考慮に入れる
            time_to_wait = interval - (time.time() - loop_iter_start_time)
            if time_to_wait > 0:
                time.sleep(time_to_wait)
        
        print("\n測定が完了しました。")

    except KeyboardInterrupt:
        print("\n測定が中断されました。")
    
    # 最後にまとめて表示
    if all_readings:
        print("\n--- 測定結果一覧 ---")
        for reading in all_readings:
            # タイムスタンプを人間が読みやすい形式に変換
            timestamp_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(reading["timestamp"]))
            print(f"時刻: {timestamp_str}, "
                  f"温度: {reading['temperature_celsius']:.2f} ℃, "
                  f"気圧: {reading['pressure_hpa']:.2f} hPa, "
                  f"湿度: {reading['humidity_percent']:.2f} %")
    else:
        print("データは収集されませんでした。")
